----PROCEDIMIENTOS ALMACENADOS PARA AGREGAR/ELIMINAR Y MODIFICAR PRODUCTOS----
set serveroutput on;
CREATE OR REPLACE PACKAGE Pack_Productos
IS

PROCEDURE P_REGISTRO_PRODUCTO(param_nombre_prod IN varchar2,param_fecha_produc IN varchar2,
                            param_fecha_venc IN varchar2,param_cant IN number,
                            param_precio_prod IN number,param_descrip_prod IN varchar2,
                            param_id_prov IN number,param_id_cate IN number,
                            param_id_marca IN number);
PROCEDURE FoodAdmin.P_MODIFICAR_CANT_PRODUCTO(PARAM_ID_PRODUCTO IN number, PARAM_CANT IN number);
PROCEDURE FoodAdmin.P_MODIFICAR_PREC_PRODUCTO(PARAM_ID_PRODUCTO IN number, PARAM_PRECIO IN number);
PROCEDURE FoodAdmin.P_MODIFICAR_PRODUCTO(PARAM_ID_PRODUCTO IN number, PARAM_VALOR IN number, PARAM_OPCION IN NUMBER);
PROCEDURE FoodAdmin.P_ELIMINAR_PRODUCTO(PARAM_ID_PRODUCTO IN number);
END;

create or replace PACKAGE BODY Productos
IS

PROCEDURE FoodAdmin.P_REGISTRO_PRODUCTO(
                            param_nombre_prod IN varchar2,
                            param_fecha_produc IN varchar2,
                            param_fecha_venc IN varchar2,
                            param_cant IN number,
                            param_precio_prod IN number,
                            param_descrip_prod IN varchar2,
                            param_id_prov IN number,
                            param_id_cate IN number,
                            param_id_marca IN number)
AS 
BEGIN
  INSERT INTO producto(
            nombre_producto,
            fecha_produccion,
            fecha_vencimiento,
            cantidad,
            precio_producto,
            descripcion_producto,
            id_proveedor,
            id_categoria,
            id_marca)
        VALUES (param_nombre_prod,
            param_fecha_produc,
            param_fecha_venc,
            param_cant,
            param_precio_prod,
            param_descrip_prod,
            param_id_prov,
            param_id_cate,
            param_id_marca);    
END;


PROCEDURE FoodAdmin.P_MODIFICAR_CANT_PRODUCTO(PARAM_ID_PRODUCTO IN number, PARAM_CANT IN number)
AS 
BEGIN
  UPDATE FoodAdmin.PRODUCTO SET FoodAdmin.PRODUCTO.CANTIDAD=PARAM_CANT
  WHERE ID_PRODUCTO=PARAM_ID_PRODUCTO;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_PREC_PRODUCTO(PARAM_ID_PRODUCTO IN number, PARAM_PRECIO IN number)
AS 
BEGIN
  UPDATE
  FoodAdmin.PRODUCTO SET FoodAdmin.PRODUCTO.PRECIO_PRODUCTO=PARAM_PRECIO
  WHERE ID_PRODUCTO=PARAM_ID_PRODUCTO;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_PRODUCTO(PARAM_ID_PRODUCTO IN number, PARAM_VALOR IN number, PARAM_OPCION IN NUMBER)
AS 
BEGIN
  IF PARAM_OPCION =1 THEN  FoodAdmin.P_MODIFICAR_CANT_PRODUCTO(PARAM_ID_PRODUCTO, PARAM_VALOR);
  ELSIF PARAM_OPCION=2 THEN  FoodAdmin.P_MODIFICAR_PREC_PRODUCTO(PARAM_ID_PRODUCTO, PARAM_VALOR);
  ELSE  dbms_output.put_line('La opcion suministrada no existe');
    END IF;	
END;

PROCEDURE FoodAdmin.P_ELIMINAR_PRODUCTO(PARAM_ID_PRODUCTO IN number)
AS 
BEGIN
  DELETE FoodAdmin.PRODUCTO WHERE FoodAdmin.PRODUCTO.ID_PRODUCTO=PARAM_ID_PRODUCTO;
END;
END;


----PROCEDIMIENTOS ALMACENADOS PARA AGREGAR/ELIMINAR Y MODIFICAR CLIENTES/EMPLEADOS----
CREATE OR REPLACE PACKAGE Pack_Personas
IS
PROCEDURE FoodAdmin.P_REGISTRO_PERSONA(PARAM_PRIM_NOMBRE IN VARCHAR2,PARAM_SEGU_NOMBRE IN VARCHAR2,
                                    PARAM_PRIM_APELLIDO IN VARCHAR2,PARAM_SEGU_APELLIDO IN VARCHAR2,
                                    PARAM_FECHA_NACI IN VARCHAR2,PARAM_NUM_ID IN VARCHAR2,
                                    PARM_ID_DIREC IN NUMBER,PARAM_ID_TEL IN NUMBER,PARAM_ID_CORREOE IN NUMBER);
PROCEDURE FoodAdmin.P_REGISTRO_CLIENTE(PARAM_ID_PERSONA IN NUMBER);
PROCEDURE FoodAdmin.P_REGISTRO_EMPLEADO(PARAM_HORAS_LAB IN NUMBER,PARAM_ID_PERSONA IN NUMBER, PARAM_ID_CARGO IN NUMBER,PARAM_ID_SUCUR IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_CORREO(PARAM_ID_PERSONA IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_TELEFONO(PARAM_ID_PERSONA IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_DIRECCION(PARAM_ID_PERSONA IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_PERSONA(PARAM_ID_PERSONA IN NUMBER, PARAM_OPCION IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_ELIMINAR_PERSONA(PARAM_ID_PERSONA IN number);
PROCEDURE FoodAdmin.P_MODIFICAR_HORASLAB(PARAM_ID_EMPLEADO IN NUMBER, PARAM_HORASLAB IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_CARGO(PARAM_ID_EMPLEADO IN NUMBER, PARAM_IDCARGO IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_SUCURSAL(PARAM_ID_EMPLEADO IN NUMBER, PARAM_IDSUCUR IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_EMPLEADO(PARAM_ID_PERSONA IN NUMBER, PARAM_OPCION IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_ELIMINAR_EMPLEADO(PARAM_ID_EMPLEADO IN number);
PROCEDURE FoodAdmin.P_ELIMINAR_CLIENTE(PARAM_ID_CLIENTE IN number);
END;

CREATE OR REPLACE PACKAGE BODY Pack_Personas
IS
PROCEDURE FoodAdmin.P_REGISTRO_PERSONA(PARAM_PRIM_NOMBRE IN VARCHAR2,
                                                  PARAM_SEGU_NOMBRE IN VARCHAR2,
                                                  PARAM_PRIM_APELLIDO IN VARCHAR2,
                                                  PARAM_SEGU_APELLIDO IN VARCHAR2,
                                                  PARAM_FECHA_NACI IN VARCHAR2,
                                                  PARAM_NUM_ID IN VARCHAR2,
                                                  PARM_ID_DIREC IN NUMBER,
                                                  PARAM_ID_TEL IN NUMBER,
                                                  PARAM_ID_CORREOE IN NUMBER)
AS 
BEGIN
  INSERT INTO PERSONA(
            PRIMER_NOMBRE,
            SEGUNDO_NOMBRE,
            PRIMER_APELLIDO,
            SEGUNDO_APELLIDO,
            FECHA_NACIMIENTO,
            NUM_IDENTIFICACION,
            ID_DIRECCION,
            ID_TELEFONO,
            ID_CORREOE)
        VALUES (
            PARAM_PRIM_NOMBRE,
            PARAM_SEGU_NOMBRE,
            PARAM_PRIM_APELLIDO,
            PARAM_SEGU_APELLIDO,
            PARAM_FECHA_NACI,
            PARAM_NUM_ID,
            PARM_ID_DIREC,
            PARAM_ID_TEL,
            PARAM_ID_CORREOE);
END;

PROCEDURE FoodAdmin.P_REGISTRO_CLIENTE(PARAM_ID_PERSONA IN NUMBER)
AS
BEGIN
    INSERT INTO FoodAdmin.CLIENTE (ID_PERSONA)VALUES(PARAM_ID_PERSONA);
END;

PROCEDURE FoodAdmin.P_REGISTRO_EMPLEADO(PARAM_HORAS_LAB IN NUMBER, 
                                            PARAM_ID_PERSONA IN NUMBER, 
                                            PARAM_ID_CARGO IN NUMBER, 
                                            PARAM_ID_SUCUR IN NUMBER)
AS
BEGIN
    INSERT INTO FoodAdmin.EMPLEADO (HORAS_LABOR_MES,
                        ID_PERSONA,
                        ID_CARGO,
                        ID_SUCURSAL)
    VALUES (PARAM_HORAS_LAB, PARAM_ID_PERSONA, PARAM_ID_CARGO, PARAM_ID_SUCUR);
END;

PROCEDURE FoodAdmin.P_MODIFICAR_CORREO(PARAM_ID_PERSONA IN NUMBER, PARAM_VALOR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.PERSONA SET FoodAdmin.PERSONA.ID_CORREOE=PARAM_VALOR
    WHERE FoodAdmin.PERSONA.ID_PERSONA=PARAM_ID_PERSONA;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_TELEFONO(PARAM_ID_PERSONA IN NUMBER, PARAM_VALOR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.PERSONA SET FoodAdmin.PERSONA.ID_TELEFONO=PARAM_VALOR
    WHERE FoodAdmin.PERSONA.ID_PERSONA=PARAM_ID_PERSONA;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_DIRECCION(PARAM_ID_PERSONA IN NUMBER, PARAM_VALOR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.PERSONA SET FoodAdmin.PERSONA.ID_DIRECCION=PARAM_VALOR
    WHERE FoodAdmin.PERSONA.ID_PERSONA=PARAM_ID_PERSONA;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_PERSONA(PARAM_ID_PERSONA IN NUMBER, PARAM_OPCION IN NUMBER, PARAM_VALOR IN NUMBER)
AS 
BEGIN
  IF PARAM_OPCION =1 THEN  FoodAdmin.P_MODIFICAR_CORREO(PARAM_ID_PERSONA, PARAM_VALOR);
  ELSIF PARAM_OPCION=2 THEN  FoodAdmin.P_MODIFICAR_TELEFONO(PARAM_ID_PERSONA, PARAM_VALOR);
  ELSIF PARAM_OPCION=3 THEN FoodAdmin.P_MODIFICAR_DIRECCION(PARAM_ID_PERSONA, PARAM_VALOR);
  ELSE  dbms_output.put_line('La opcion suministrada no existe');
    END IF;	
END;

PROCEDURE FoodAdmin.P_ELIMINAR_PERSONA(PARAM_ID_PERSONA IN number)
AS 
BEGIN
  DELETE FoodAdmin.PERSONA WHERE FoodAdmin.PERSONA.ID_PERSONA=PARAM_ID_PERSONA;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_HORASLAB(PARAM_ID_EMPLEADO IN NUMBER, PARAM_HORASLAB IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.EMPLEADO SET FoodAdmin.EMPLEADO.HORAS_LABOR_MES=PARAM_HORASLAB
    WHERE FoodAdmin.EMPLEADO.ID_EMPLEADO=PARAM_ID_EMPLEADO;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_CARGO(PARAM_ID_EMPLEADO IN NUMBER, PARAM_IDCARGO IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.EMPLEADO SET FoodAdmin.EMPLEADO.ID_CARGO=PARAM_IDCARGO
    WHERE FoodAdmin.EMPLEADO.ID_EMPLEADO=PARAM_ID_EMPLEADO;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_SUCURSAL(PARAM_ID_EMPLEADO IN NUMBER, PARAM_IDSUCUR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.EMPLEADO SET FoodAdmin.EMPLEADO.ID_SUCURSAL=PARAM_IDSUCUR
    WHERE FoodAdmin.EMPLEADO.ID_PERSONA=PARAM_ID_EMPLEADO;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_EMPLEADO(PARAM_ID_PERSONA IN NUMBER, PARAM_OPCION IN NUMBER, PARAM_VALOR IN NUMBER)
AS 
BEGIN
  IF PARAM_OPCION =1 THEN  FoodAdmin.P_MODIFICAR_HORASLAB(PARAM_ID_PERSONA, PARAM_VALOR);
  ELSIF PARAM_OPCION=2 THEN  FoodAdmin.P_MODIFICAR_CARGO(PARAM_ID_PERSONA, PARAM_VALOR);
  ELSIF PARAM_OPCION=3 THEN FoodAdmin.P_MODIFICAR_SUCURSAL(PARAM_ID_PERSONA, PARAM_VALOR);
  ELSE  dbms_output.put_line('La opcion suministrada no existe');
    END IF;	
END;


PROCEDURE FoodAdmin.P_ELIMINAR_EMPLEADO(PARAM_ID_EMPLEADO IN number)
AS 
BEGIN
  DELETE FoodAdmin.EMPLEADO WHERE FoodAdmin.EMPLEADO.ID_PERSONA=PARAM_ID_EMPLEADO;
END;

PROCEDURE FoodAdmin.P_ELIMINAR_CLIENTE(PARAM_ID_CLIENTE IN number)
AS 
BEGIN
  DELETE FoodAdmin.CLIENTE WHERE FoodAdmin.CLIENTE.ID_CLIENTE=PARAM_ID_CLIENTE;
END;
END;

----PROCEDIMIENTOS ALMACENADOS PARA AGREGAR/ELIMINAR Y MODIFICAR PROVEEDORES----

CREATE OR REPLACE PACKAGE Pack_Proveedor
IS
PROCEDURE FoodAdmin.P_REGISTRO_PROVEEDOR(PARAM_NOMBRE_EMP IN VARCHAR2,PARAM_ID_CORREOE IN NUMBER, PARAM_ID_TEL IN NUMBER,PARM_ID_DIREC IN NUMBER);
PROCEDURE FoodAdmin.P_ELIMINAR_PROVEEDOR (PARAM_ID_PROVEEDOR IN number);
PROCEDURE FoodAdmin.P_PROV_MODIFICAR_CORREO(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_PROV_MODIFICAR_TELEFONO(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_PROV_MODIFICAR_DIRECCION(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_VALOR IN NUMBER);
PROCEDURE FoodAdmin.P_MODIFICAR_PROVEEDOR(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_OPCION IN NUMBER, PARAM_VALOR IN NUMBER);
END;

CREATE OR REPLACE PACKAGE BODY Pack_Proveedor
IS
PROCEDURE FoodAdmin.P_REGISTRO_PROVEEDOR(PARAM_NOMBRE_EMP IN VARCHAR2,
                                                  PARAM_ID_CORREOE IN NUMBER,
                                                  PARAM_ID_TEL IN NUMBER,
                                                  PARM_ID_DIREC IN NUMBER)
AS 
BEGIN
  INSERT INTO PROVEEDOR(
            NOMBRE_EMPRESA,
            ID_CORREOE,
            ID_TELEFONO,
            ID_DIRECCION)
        VALUES (PARAM_NOMBRE_EMP,
              PARAM_ID_CORREOE,
              PARAM_ID_TEL,
              PARM_ID_DIREC);
END;

PROCEDURE FoodAdmin.P_ELIMINAR_PROVEEDOR (PARAM_ID_PROVEEDOR IN number)
AS 
BEGIN
  DELETE FoodAdmin.PROVEEDOR WHERE FoodAdmin.PROVEEDOR.ID_PROVEEDOR=PARAM_ID_PROVEEDOR;
END;

PROCEDURE FoodAdmin.P_PROV_MODIFICAR_CORREO(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_VALOR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.PROVEEDOR SET FoodAdmin.PROVEEDOR.ID_CORREOE=PARAM_VALOR
    WHERE FoodAdmin.PROVEEDOR.ID_PROVEEDOR=PARAM_ID_PROVEEDOR;
END;

PROCEDURE FoodAdmin.P_PROV_MODIFICAR_TELEFONO(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_VALOR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.PROVEEDOR SET FoodAdmin.PROVEEDOR.ID_TELEFONO=PARAM_VALOR
    WHERE FoodAdmin.PROVEEDOR.ID_PROVEEDOR=PARAM_ID_PROVEEDOR;
END;

PROCEDURE FoodAdmin.P_PROV_MODIFICAR_DIRECCION(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_VALOR IN NUMBER)
AS
BEGIN
    UPDATE FoodAdmin.PROVEEDOR SET FoodAdmin.PROVEEDOR.ID_DIRECCION=PARAM_VALOR
    WHERE FoodAdmin.PROVEEDOR.ID_PROVEEDOR=PARAM_ID_PROVEEDOR;
END;

PROCEDURE FoodAdmin.P_MODIFICAR_PROVEEDOR(PARAM_ID_PROVEEDOR IN NUMBER, PARAM_OPCION IN NUMBER, PARAM_VALOR IN NUMBER)
AS 
BEGIN
  IF PARAM_OPCION =1 THEN  FoodAdmin.P_PROV_MODIFICAR_CORREO(PARAM_ID_PROVEEDOR, PARAM_VALOR);
  ELSIF PARAM_OPCION=2 THEN  FoodAdmin.P_PROV_MODIFICAR_TELEFONO(PARAM_ID_PROVEEDOR, PARAM_VALOR);
  ELSIF PARAM_OPCION=3 THEN FoodAdmin.P_PROV_MODIFICAR_DIRECCION(PARAM_ID_PROVEEDOR, PARAM_VALOR);
  ELSE  dbms_output.put_line('La opcion suministrada no existe');
    END IF;	
END;
END;
-------------------INVENTARIO-----------------------------------------
CREATE VIEW HR.INVENTARIO AS
    SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, CANTIDAD
    FROM HR.PRODUCTO;

SELECT * FROM INVENTARIO;

CREATE OR REPLACE PROCEDURE FoodAdmin.P_INVENTARIO
AS
    CURSOR C_INVENTARIO IS SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, CANTIDAD
        FROM FoodAdmin.PRODUCTO;
    VAR_INVENTARIO FoodAdmin.PRODUCTO%rowtype;
BEGIN
   FOR VAR_INVENTARIO IN C_INVENTARIO LOOP
        DBMS_OUTPUT.PUT_LINE(VAR_INVENTARIO.ID_PRODUCTO||' | '||VAR_INVENTARIO.NOMBRE_PRODUCTO||' | '||VAR_INVENTARIO.CANTIDAD);
   END LOOP; 
END;


-------------------------FACTURACION---------------------------------
create table detalleFactura(
 id_detalle number(10) GENERATED BY DEFAULT ON NULL AS IDENTITY constraint pk_id_detalle primary key,
 id_producto number(10),
 nombre_producto varchar2(30),
 cantidad number(10),
 precio_unidad number(10),
 total number(10),
 constraint fk_precio_unidad FOREIGN KEY (precio_producto) REFERENCES producto(precio_producto),
 constraint fk_nombre_producto FOREIGN KEY (nombre_producto) REFERENCES producto(nombre_producto),
 constraint fk_id_producto FOREIGN KEY (id_producto) REFERENCES producto(id_producto);
 
create table Factura(
id_factura number(10) GENERATED BY DEFAULT ON NULL AS IDENTITY constraint pk_id_factura primary key,
id_cliente number(10),
fecha varchar2(30),
total_venta number(10),
id_detalle number(10), 
constraint fk_id_cliented FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
constraint fk_id_detalle FOREIGN KEY (id_detalle) REFERENCES detalleFactura(id_detalle)
);

CREATE OR REPLACE PACKAGE Pack_Facturacion
IS
    FUNCTION calc_Subtotal(var_cantidad in number, var_precio in number);
    PROCEDURE FoodAdmin.P_DETALLE(param_idproducto in number,param_nombreprod in varchar2, param_cant in number, param_precio in number);
    FUNCTION calc_Total(subtotal in number);
    PROCEDURE FoodAdmin.P_FACTURACION(param_id_cliente in number,param_fecha in number,param_idetalle in number);
END;

CREATE OR REPLACE PACKAGE BODY Pack_Facturacion
IS

FUNCTION calc_Subtotal(var_cantidad in number, var_precio in number)
RETURN NUMBER
IS
    VAR_SUBTOTAL NUMBER(10);
BEGIN
    VAR_SUBTOTAL=precio*cantidad;
    RETURN VAR_SUBTOTAL;
END;

PROCEDURE FoodAdmin.P_DETALLE(param_idproducto in number, 
                                                param_nombreprod in varchar2, 
                                                param_cant in number, 
                                                param_precio in number)
AS
    var_total := calc_Subtotal(param_cant, param_precio);
BEGIN
    INSERT INTO detalle_Factura(
        id_producto,
        nombre_producto,
        cantidad,
        precio_unidad,
        total)
    VALUES (param_idproducto,
        param_nombreprod,
        param_cant,
        param_precio,
        var_total);
END;
    
FUNCTION calc_Total(subtotal in number)
RETURN NUMBER
IS
    VAR_TOTAL NUMBER(10);
BEGIN
    VAR_TOTAL=subtotal+VAR_TOTAL;
    RETURN VAR_TOTAL;
END;

PROCEDURE FoodAdmin.P_FACTURACION(
                            param_id_cliente in number, 
                            param_fecha in number, 
                            param_idetalle in number)
AS 
    var_total :=calc_Total(SELECT total from detalle_Factura where id_detalle=param_idetalle;)
BEGIN
  INSERT INTO Factura()
        VALUES ();    
END;
END;

----------------------- TRIGGERS ----------------------------------

CREATE TABLE AUDITORIA_PRODUCTO(
        ID NUMBER GENERATED ALWAYS AS IDENTITY,
        ACCION VARCHAR2(100),
        USUARIO VARCHAR2(50),
        FECHA DATE,
        PRIMARY KEY (ID));

CREATE TABLE TABLA_LOG_PRODUCTO
(
    CODIGO NUMBER(10),
    OBSERVACION VARCHAR2(200),
    USUARIO VARCHAR2(50),
);

CREATE OR REPLACE TRIGGER TRIG_PRODUCTO
    AFTER INSERT OR UPDATE OR DELETE ON PRODUCTO
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
        SELECT USER INTO VAR_USUARIO FROM DUAL;
    IF INSERTING THEN
        INSERT INTO AUDITORIA_PRODUCTO(ACCION, USUARIO, FECHA) 
        VALUES ('REGISTRO DE NUEVO PRODUCTO',VAR_USUARIO, SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_PRODUCTO (ACCION, USUARIO, FECHA)
        VALUES ('SE ELIMINO EL UN PRODUCTO', VAR_USUARIO, SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_PRODUCTO (ACCION, USUARIO, FECHA)
        VALUES ('SE MODIFICO UN PRODUCTO', VAR_USUARIO, SYSDATE);
    END IF;
END;

CREATE OR REPLACE TRIGGER TRIG_PRODUCTO_DELETE
    AFTER DELETE ON PRODUCTO
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION,USUARIO)
        VALUES (1, ' El producto elimnado es: ID:'||:old.ID_PRODUCTO||' NOMBRE: '||:old.NOMBRE_PRODUCTO, VAR_USUARIO);
END;

CREATE OR REPLACE TRIGGER TRIG_PRODUCTO_INSERT
    AFTER INSERT ON PRODUCTO
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION,USUARIO)
        VALUES (1, ' El producto insertado es: '||:new.ID_PRODUCTO||' NOMBRE: '
        ||:new.NOMBRE_PRODUCTO||' CANTIDAD: '||new.cantidad, VAR_USUARIO);
END;

CREATE OR REPLACE TRIGGER TRIG_PRODUCTO_UPDATE
    AFTER UPDATE ON PRODUCTO
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION)
        VALUES (1, 'CANTIDAD ANTERIOR: '||:old.cantidad||'NUEVA CANTIDAD: '||:new.cantidad, VAR_USUARIO);
END;


CREATE TABLE AUDITORIA_PERSONA(
        ID NUMBER GENERATED ALWAYS AS IDENTITY,
        ACCION VARCHAR2(100),
        USUARIO VARCHAR2(50),
        FECHA DATE,
        PRIMARY KEY (ID));

CREATE TABLE TABLA_LOG_PERSONA
(
    CODIGO NUMBER(10),
    OBSERVACION VARCHAR2(200),
    USUARIO VARCHAR2(50),
);

CREATE OR REPLACE TRIGGER TRIG_PERSONA
    AFTER INSERT OR UPDATE OR DELETE ON PERSONA
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
        SELECT USER INTO VAR_USUARIO FROM DUAL;
    IF INSERTING THEN
        INSERT INTO AUDITORIA_PRODUCTO(ACCION, USUARIO, FECHA) 
        VALUES ('REGISTRO DE NUEVA PERSONA',VAR_USUARIO, SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_PRODUCTO (ACCION, USUARIO, FECHA)
        VALUES ('SE ELIMINO UNA PERSONA', VAR_USUARIO, SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_PRODUCTO (ACCION, USUARIO, FECHA)
        VALUES ('SE MODIFICO UNA PERSONA', VAR_USUARIO, SYSDATE);
    END IF;
END;

CREATE OR REPLACE TRIGGER TRIG_PERSONA_DELETE
    AFTER DELETE ON PERSONA
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION,USUARIO)
        VALUES (1, ' Se elimino a la persona :'||:old.ID_PERSONA||' NOMBRE: '||:old.PRIMER_NOMBRE|| ' '||:old.SEGUNDO_NOMBRE
        || ' '||:old.PRIMER_APELLIDO|| ' '||:old.SEGUNDO_APELLIDO||' CON LA IDENTIFICACION '||:old.NUM_IDENTIFICACION, VAR_USUARIO);
END;

CREATE OR REPLACE TRIGGER TRIG_PERSONA_INSERT
    AFTER INSERT ON PERSONA
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION,USUARIO)
        VALUES (1, ' Se inserto a la persona :'||:new.ID_PERSONA||' NOMBRE: '||:new.PRIMER_NOMBRE|| ' '||:new.SEGUNDO_NOMBRE
        || ' '||:new.PRIMER_APELLIDO|| ' '||:new.SEGUNDO_APELLIDO||' CON LA IDENTIFICACION '||:new.NUM_IDENTIFICACION, VAR_USUARIO);
END;

CREATE OR REPLACE TRIGGER TRIG_PERSONA_UPDATE
    AFTER UPDATE ON PERSONA
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION)
        VALUES (1, 'Telefono Viejo: '||:old.ID_TELEFONO||'Nuevo Telefono: '||:new.ID_TELEFONO||
                   'Correo Viejo: '||:old.ID_CORREOE||'Nuevo Correo: '||:new.ID_CORREOE||
                   'Direccion Vieja '||:old.ID_DIRECCION||'Nueva Direccion: '||:new.DIRECCION||, VAR_USUARIO);
END;

CREATE TABLE AUDITORIA_PROVEEDOR(
        ID NUMBER GENERATED ALWAYS AS IDENTITY,
        ACCION VARCHAR2(100),
        USUARIO VARCHAR2(50),
        FECHA DATE,
        PRIMARY KEY (ID));

CREATE TABLE TABLA_LOG_PROVEEDOR
(
    CODIGO NUMBER(10),
    OBSERVACION VARCHAR2(200),
    USUARIO VARCHAR2(50),
);

CREATE OR REPLACE TRIGGER TRIG_PROVEEDOR
    AFTER INSERT OR UPDATE OR DELETE ON PROVEEDOR
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
        SELECT USER INTO VAR_USUARIO FROM DUAL;
    IF INSERTING THEN
        INSERT INTO AUDITORIA_PROVEEDOR(ACCION, USUARIO, FECHA) 
        VALUES ('REGISTRO DE NUEVO PROVEEDOR',VAR_USUARIO, SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_PROVEEDOR (ACCION, USUARIO, FECHA)
        VALUES ('SE ELIMINO UN PROVEEDOR', VAR_USUARIO, SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_PROVEEDOR (ACCION, USUARIO, FECHA)
        VALUES ('SE MODIFICO UN PROVEEDOR', VAR_USUARIO, SYSDATE);
    END IF;
END;

CREATE OR REPLACE TRIGGER TRIG_PROVEEDOR_DELETE
    AFTER DELETE ON PROVEEDOR
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION,USUARIO)
        VALUES (1, ' El proveedor elimnado es: ID:'||:old.ID_PROVEEDOR||' NOMBRE: '||:old.NOMBRE_EMPRESA, VAR_USUARIO);
END;

CREATE OR REPLACE TRIGGER TRIG_PROVEEDOR_INSERT
    AFTER INSERT ON PROVEEDOR
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION,USUARIO)
        VALUES (1, ' El proveedor insertado es: '||:new.ID_PROVEEDOR||' NOMBRE: '
        ||:new.NOMBRE_EMPRESA, VAR_USUARIO);
END;

CREATE OR REPLACE TRIGGER TRIG_PROVEEDOR_UPDATE
    AFTER UPDATE ON PROVEEDOR
    FOR EACH ROW
DECLARE
    VAR_USUARIO VARCHAR2(50);
BEGIN
    SELECT USER INTO VAR_USUARIO FROM DUAL;
    INSERT INTO TLOG(CODIGO, OBSEERVACION)
        VALUES (1, 'Telefono Viejo: '||:old.ID_TELEFONO||'Nuevo Telefono: '||:new.ID_TELEFONO||
                   'Correo Viejo: '||:old.ID_CORREOE||'Nuevo Correo: '||:new.ID_CORREOE||
                   'Direccion Vieja '||:old.ID_DIRECCION||'Nueva Direccion: '||:new.DIRECCION||, VAR_USUARIO);
END;
